pipelines:
  default:
    - parallel:
      - step:
          name: Build Linux binaries
          # Produces:
          # - bin/godot_server.x11.opt.tools.64 ('headless' build for server-side export creation)
          # - bin/godot_server.x11.opt.64 (Server build for use by the Ego platform)
          # - bin/godot.x11.opt.tools.64 (Editor for use on Linux)
          # - bin/linux_x11_64_debug (Export template to create a Linux version of the Ego app from any platform)
          image:
            name: registry.prehensile-tales.com/godot/ubuntu-64:latest
          script:
            - export BUILD_NAME=imvu
            - export OPTIONS="verbose=yes warnings=no progress=no CC=gcc-8 CXX=g++-8 builtin_libpng=yes builtin_openssl=yes builtin_zlib=yes debug_symbols=no use_static_cpp=yes use_lto=yes"
            - scons -j8 platform=server tools=no target=release ${OPTIONS}
            - scons -j8 platform=server tools=yes target=release_debug ${OPTIONS}
            - scons -j8 platform=x11 tools=yes target=release_debug ${OPTIONS}
            - scons -j8 platform=x11 tools=no target=release_debug ${OPTIONS}
            - mv bin/godot.x11.opt.debug.64 bin/linux_x11_64_debug

      - step:
          name: Build Windows 64-bit binaries
          # Produces:
          # - bin/godot.windows.opt.tools.64.exe (Editor or use on Windows)
          # - bin/windows_64_debug.exe (Export template to create a Windows version of the Ego app from any platform)
          image:
            name: registry.prehensile-tales.com/godot/windows:latest
          script:
            - export BUILD_NAME=imvu
            - export OPTIONS="verbose=yes warnings=no progress=no platform=windows bits=64 builtin_libpng=yes builtin_openssl=yes builtin_zlib=yes debug_symbols=no use_static_cpp=yes use_lto=yes"
            - scons -j8 ${OPTIONS} tools=yes target=release_debug
            - scons -j8 ${OPTIONS} tools=no target=release_debug
            - mv bin/godot.windows.opt.debug.64.exe bin/windows_64_debug.exe

      - step:
          name: Build MacOSX 64-bit binaries
          # Produces:
          # - bin/ego-editor-osx.zip (Editor for use on MacOSX)
          # - bin/osx.zip (Export template to create an OSX version of the Ego app from any platform)
          image:
            name: registry.prehensile-tales.com/godot-private/macosx:latest
            username: imvu
            password: iengo0EiV0
          script:
            - export BUILD_NAME=imvu
            - export PATH=/root/osxcross/target/bin:$PATH
            - export OSXCROSS_ROOT=/root/osxcross
            - export OPTIONS="verbose=yes warnings=no progress=no platform=osx osxcross_sdk=darwin17 builtin_libpng=yes builtin_openssl=yes builtin_zlib=yes debug_symbols=no use_static_cpp=yes use_lto=yes"
            - scons -j8 ${OPTIONS} tools=yes target=release_debug
            - cp -r git/misc/dist/osx_tools.app Godot.app
            - mkdir -p Godot.app/Contents/MacOS
            - cp bin/godot.osx.opt.tools.64 Godot.app/Contents/MacOS/Godot
            - chmod +x Godot.app/Contents/MacOS/Godot
            - zip -q -9 -r "bin/ego-editor-osx.zip" Godot.app
            - scons -j8 ${OPTIONS} tools=no target=release_debug
            - cp -r misc/dist/osx_template.app .
            - mkdir osx_template.app/Contents/MacOS
            - cp bin/godot.osx.opt.debug.64 osx_template.app/Contents/MacOS/godot_osx_debug.64
            - chmod +x osx_template.app/Contents/MacOS/godot_osx*
            - zip -q -9 -r bin/osx.zip osx_template.app

      - step:
          name: Build iOS export template
          # Produces:
          # - bin/iphone.zip (Export template to create an iPhone version of the Ego app from any platform)
          # Contains both debug and non-debug export templates as well as x86 (iPhone simulator) templates
          image:
            name: registry.prehensile-tales.com/godot-private/ios:latest
            username: imvu
            password: iengo0EiV0
          script:
            - export BUILD_NAME=imvu
            - export OSXCROSS_IOS=not_nothing
            - export OPTIONS="verbose=yes warnings=no progress=no platform=iphone osxcross_sdk=darwin15 builtin_libpng=yes builtin_openssl=yes builtin_zlib=yes debug_symbols=no use_static_cpp=yes"
            - scons -j8 ${OPTIONS} arch=arm tools=no target=release_debug IPHONESDK="/root/ioscross/arm64/SDK/iPhoneOS11.2.sdk" IPHONEPATH="/root/ioscross/arm64/" ios_triple="arm-apple-darwin11-"
            - scons -j8 ${OPTIONS} arch=arm tools=no target=release IPHONESDK="/root/ioscross/arm64/SDK/iPhoneOS11.2.sdk" IPHONEPATH="/root/ioscross/arm64/" ios_triple="arm-apple-darwin11-"
            - scons -j8 ${OPTIONS} arch=arm64 tools=no target=release_debug IPHONESDK="/root/ioscross/arm64/SDK/iPhoneOS11.2.sdk" IPHONEPATH="/root/ioscross/arm64/" ios_triple="arm-apple-darwin11-"
            - scons -j8 ${OPTIONS} arch=arm64 tools=no target=release IPHONESDK="/root/ioscross/arm64/SDK/iPhoneOS11.2.sdk" IPHONEPATH="/root/ioscross/arm64/" ios_triple="arm-apple-darwin11-"
            - scons -j8 ${OPTIONS} arch=x86 tools=no target=release_debug IPHONESDK="/root/ioscross/x86_64/SDK/iPhoneOS11.2.sdk" IPHONEPATH="/root/ioscross/x86_64/" ios_triple="x86_64-apple-darwin11-"
            - scons -j8 ${OPTIONS} arch=x86 tools=no target=release IPHONESDK="/root/ioscross/x86_64/SDK/iPhoneOS11.2.sdk" IPHONEPATH="/root/ioscross/x86_64/" ios_triple="x86_64-apple-darwin11-"
            - /root/ioscross/arm64/bin/arm-apple-darwin11-lipo -create bin/libgodot.iphone.opt.arm.a bin/libgodot.iphone.opt.arm64.a bin/libgodot.iphone.opt.x86.a -output bin/libgodot.iphone.opt.fat
            - /root/ioscross/arm64/bin/arm-apple-darwin11-lipo -create bin/libgodot.iphone.opt.debug.arm.a bin/libgodot.iphone.opt.debug.arm64.a bin/libgodot.iphone.opt.debug.x86.a -output bin/libgodot.iphone.opt.debug.fat
            - cp -r misc/dist/ios_xcode ios_xcode
            - cp bin/libgodot.iphone.opt.fat ios_xcode/libgodot.iphone.release.fat.a
            - cp bin/libgodot.iphone.opt.debug.fat ios_xcode/libgodot.iphone.debug.fat.a
            - chmod +x ios_xcode/libgodot.iphone.*
            - cd ios_xcode
            - zip -q -9 -r ../bin/iphone.zip *

      - step:
          name: Build Android export template
          # Produces:
          # - bin/android_release.apk (Export template to create an Android version of the Ego app from any platform)
          # - bin/android_debug.apk (Export template to create an Android version with debugging information of the Ego app from any platform)
          image:
            name: registry.prehensile-tales.com/godot-private/android:latest
            username: imvu
            password: iengo0EiV0
          script:
            - export BUILD_NAME=imvu
            - export ANDROID_HOME=/root/
            - export ANDROID_NDK_ROOT=/root/ndk-bundle/
            - export OPTIONS="verbose=yes warnings=no progress=no platform=android builtin_libpng=yes builtin_openssl=yes builtin_zlib=yes debug_symbols=no use_static_cpp=yes use_lto=yes"
            - scons -j8 ${OPTIONS} android_arch=armv7 tools=no target=release_debug
            - scons -j8 ${OPTIONS} android_arch=armv7 tools=no target=release
            - scons -j8 ${OPTIONS} android_arch=arm64v8 tools=no target=release_debug
            - scons -j8 ${OPTIONS} android_arch=arm64v8 tools=no target=release
            - scons -j8 ${OPTIONS} android_arch=x86 tools=no target=release_debug
            - scons -j8 ${OPTIONS} android_arch=x86 tools=no target=release
            - cd platform/android/java
            - ./gradlew build
